INTRO: 
The paper describes user story characteristics, reasons of user story estimation inaccuracy as well as a model 
of their potential impact on post-release defects in large IT software ventures, all derived from the conducted interview 
with practitioners in Capgemini software development company.
Predictive analytics can be used to predict defect-prone software modules (e.g., classes). The aim of this paper is lay down the foundation for the novel kind of defect predictors, based on inaccurate estimations, that could be 
used to enrich software defect prediction models.
They analysed several agile projects, and they found that estimation inaccuracy was a less frequent occurrence for these companies than in traditionally software development projects.

This paper is organised as follows: 
#A general description of the US life-cycle and characteristics. 
#It describes the conducted survey, participants and presents 
#The results, Conclusions and future work

USER STORIES:
In software development and especially in agile software development, a US is a high-level 
definition of a requirement in the business language of the end user. User stories
are a part of an agile approach which helps to shift the focus from writing about requirements to 
talking about them.

Figure 1. Themes, epics and user stories

Refinement Process and Development of USER STORIES:
the phases are listed below:
 drafting the US,
 establishing agreements with key users - sponsor seeking, 
 a prioritisation meeting,
 a refinement meeting,
 a rough estimate meeting, an estimation meeting,
 a planning meeting
All of the parties concerned (stakeholders and the development team) are actively involved 
in the processes of both developments as well as testing.

The problems with estimating user stories. A US receives the estimates from the 
development team before the sprint during the planning meeting. However due to the technical or 
business reasons, the estimate may by inaccurate.
estimation outcomes:
1. correct estimate (CE) - when the estimates are accurate or with a small margin of 
inaccurate estimation.
2. under estimate (UE) - when US requires more development efforts (over-runs) than set 
out in the estimate.
3. over estimate (OE) - when US requires less development efforts (under-runs) than set 
out in the estimate.


Survey and participants description:
we conducted survey which was a face to face as an individually recorded interview among experienced IT professionals.
Q1. Why user stories are poorly estimated? Every suggested cause of misestimation was 
further investigated by posing question Q2.
Q2. What is the impact of the suggested cause of misestimation on the post-release defects?

We tried to get insights from both management perspective, 
including; 
Scrum Masters (SM), 
Project Managers (PM), 
Product Owners (PO), 
Business Architects (BA), 
Developers (SSD), 
System Architects (SA), 
Enterprise Architects (EA), 
Database Administrators (DBA) and 
Software Testers (ST).



Results: (Explanation required for each RO1-14)
The answers including the reasons of poor estimations 
and have been grouped into 14 categories:
R01. Incomplete US life cycle.
R02. Level of knowledge and the authority of PO.
R03. Integration and integration testing with external systems.
R04. Technical problems and technical debt.
R05. Lack of domain knowledge.
R06. Developers’ assignment change, sprint interruption and task switching.
R07. New developers in the team.
R08. Pressures from the management team.
R09. Granularity of the tasks.
R10. Level of US details.
R11. Incorrect organisation of PB.
R12. Organisational and coordination problems
R13. Estimates with/without safety buffer.
R14. Chain reaction.


Discussion of the survey results:
Four causes of inaccurate cost estimates in traditional (waterfall) projects: 
methodology, politics, user communication and management control.

For both under and over estimated US we identified three categories:
Management Issues, Knowledge Issues, Requirements Issues

Consequences of Inaccurate Estimations:

	Post-release defect factors in case of underestimated US:
	Demotivation and stress,
	Missing requirements,
	Inappropriate tests

	Post-release defect factor in case of overestimated US:
	Inappropriate tests


Conclusions and further studies:
We conducted the interview with 12 IT professionals with proven agile expertise. We 
collected the reasons of inaccurate US estimation. We analysed their findings and tried to identify 
the estimation outcomes on the level of single US.
We identified, for both under and over estimated US, leading reasons of in-accurate 
estimation. In both cases we found three major groups: management issues, knowledge issues and 
requirements issues. Our surveys suggest that there are post-release defect factors that are directly 
related to inaccurate estimates. We find, that in the case of underestimated US, major role may play 
demotivation and stress, missing requirements and inappropriate tests. We also found that 
overestimated US in most cases will not cause post-release defects. Except if the team accidentally 
or due to lack of knowledge omits some crucial software engineering activities.
